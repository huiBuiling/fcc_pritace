整理自己做的fcc上的题，便于自己以后参考

1. Confirm the Ending
检查一个字符串(str)是否以指定的字符串(target)结尾。
如果是，返回true;如果不是，返回false。

function confirmEnding(str, target) {
  return str.substr(-target.length,target.length) === target;
}
confirmEnding("Bastian", "n");

2. Repeat a string repeat a string
重复一个指定的字符串 num次，如果num是一个负数则返回一个空字符串。

function repeat(str, num) {
  var newStr = str;
  if(num > 0){
    for(var i =0 ;i < num-1; i++){
      str += newStr;
    }
    return str;
  }else{
    return "";
  }
  return str;
}
repeat("abc", 3);
repeat("abc", -2);

3. Truncate a string
用瑞兹来截断对面的退路! 截断一个字符串！
如果字符串的长度比指定的参数num长，则把多余的部分用...来表示。注：插入到字符串尾部的三个点号也会计入字符串的长度。
如果指定的参数num小于或等于3，则添加的三个点号不会计入字符串的长度。
function truncate(str, num) {
  if(str.length <= num){
   return str;
  }
  else if(num >= 3){
    return str.slice(0,num-3) + "...";
  }else{
    return str.slice(0,num) + "...";
  }
  return str;
}

truncate("A-", 1);
truncate("Peter Piper picked a peck of pickled peppers", 14);

4. Find the Longest Word in a String
找到提供的句子中最长的单词，并计算它的长度。
function findLongestWord(str) {
  var newStr = str.split(" ");
  // 对数组中每个元素的字符串长度进行比较，由大至小
  var newStr2 = newStr.sort(function(a,b){
    return b.length-a.length;
  });
  return newStr2[0].length;
}
findLongestWord("The quick brown fox jumped over the lazy dog");

5. Check for Palindromes
判断字符串是否为回文
function palindrome(str) {
  //设置一个字符串忽略标点符号、大小写和空格
  var strRep = str.replace(/[^A-Z0-9]/ig, "").toLowerCase();
  //设置是否可以反着读
  var strReverse = strRep.split("").reverse().join("");
  // 返回判断是否相等
   return (strRep === strReverse);
}
palindrome("eye");

6. Factorialize a Number 
   计算一个整数的阶乘  （被自己的蠢思路折磨了好久，顾标注下)
   function factorialize(num) {
    /* if(num === 1) {
        return num;
    } else if(num === 0){
        return 1;
    }else {
        return num * factorialize(num-1); 
    }*/
    var newNum = 1;
    for (var i = 1; i <= num ; i++) {
        newNum *= i;
    }
    return newNum;
}
factorialize(5);

7. Chunky Monkey
猴子吃香蕉可是掰成好几段来吃哦！
function chunk(arr, size) {
  var newStr = [];
  for(var i =0 ;i< arr.length; i= i+size){
    var newStr2 = arr;
    newStr.push(newStr2.slice(i,i+size));
    
  }
  return newStr;
}
chunk(["a", "b", "c", "d"], 2);

8. Slasher Flick
打不死的小强！
function slasher(arr, howMany) {
  var newStr2 = arr.splice(howMany);
  return newStr2;
}
slasher([1, 2, 3], 2);

9. Mutations
蛤蟆可以吃队友，也可以吃对手。
如果数组第一个字符串元素包含了第二个字符串元素的所有字符，函数返回true。

function mutation(arr) {
  var newStr = arr[0].toUpperCase();
  var newStr2 = arr[1].toUpperCase();
  for(var i=0 ; i<newStr2.length;i++){
    if(newStr.indexOf(newStr2[i]) < 0){
      return false;
    }
  } 
  return true;
}
mutation(["hello", "hey"]);

10. Falsy Bouncer
真假美猴王！
删除数组中的所有假值。
在JavaScript中，假值有false、null、0、""、undefined 和 NaN。

function bouncer(arr) {
  function isBoolean(element) {     
    if(element){
        return element;
    }
  }
  var filtered = arr.filter(isBoolean);
  return filtered;
  //return arr.filter(Boolean);  一句代码就搞定了~~~~~~~~~~~~~~~~~
}
bouncer([7, "ate", "", false, 9]); //应该返回 [7, "ate", 9].
bouncer(["a", "b", "c"]); //应该返回 ["a", "b", "c"]
bouncer([false, null, 0, NaN, undefined, ""]); //应该返回 [].
bouncer([1, null, NaN, 2, undefined]); //应该返回 [1, 2].
